plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.moddev' version '2.0.27-beta'
}

version = mod_version
group = mod_group_id

repositories {
	mavenLocal()

	maven {
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	}
	maven {
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
}

base {
	archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
	version = project.neo_version

	parchment {
		mappingsVersion = project.parchment_mappings_version
		minecraftVersion = project.parchment_minecraft_version
	}

	accessTransformers {
		file('src/main/resources/META-INF/accesstransformer.cfg')
	}

	runs {
		client {
			client()

			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		server {
			server()
			programArgument '--nogui'
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		gameTestServer {
			type = "gameTestServer"
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		data {
			data()

			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}

		configureEach {
			systemProperty 'forge.logging.markers', 'REGISTRIES'
			logLevel = org.slf4j.event.Level.DEBUG
		}
	}

	mods {
		"${mod_id}" {
			sourceSet(sourceSets.main)
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
	// Example mod dependency with JEI
	// The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
	compileOnly("mezz.jei:jei-1.21-neoforge-api:${jei_version}")
	runtimeOnly("mezz.jei:jei-1.21-neoforge:${jei_version}")
}

tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
		minecraft_version      : minecraft_version,
		minecraft_version_range: minecraft_version_range,
		jei_version_range      : jei_version_range,
		neo_version            : neo_version,
		neo_version_range      : neo_version_range,
		loader_version_range   : loader_version_range,
		mod_id                 : mod_id,
		mod_name               : mod_name,
		mod_license            : mod_license,
		mod_version            : mod_version,
		mod_authors            : mod_authors,
		mod_description        : mod_description
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties
	}
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
	publications {
		register('mavenJava', MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/repo"
		}
	}
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}
